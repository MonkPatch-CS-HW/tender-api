generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONN")
}

model employee {
  id                      String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                String                    @unique @db.VarChar(50)
  firstName               String?                   @map("first_name") @db.VarChar(50)
  lastName                String?                   @map("last_name") @db.VarChar(50)
  createdAt               DateTime?                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime?                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  organizationResponsible organizationResponsible[]
  bid                     bid[]
  tender                  tender[]
  feedback                feedback[]
}

model organization {
  id                      String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String                    @db.VarChar(100)
  description             String?
  type                    organizationType?
  createdAt               DateTime?                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime?                 @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  organizationResponsible organizationResponsible[]
  tender                  tender[]
  bid                     bid[]
}

model organizationResponsible {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  userId         String?       @map("user_id") @db.Uuid
  organization   organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employee       employee?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("organization_responsible")
}

model bid {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String        @db.VarChar(100)
  description    String        @default("")
  status         bidStatus     @default(Created)
  tenderId       String        @map("tender_id") @db.Uuid
  tender         tender        @relation(fields: [tenderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  authorType     bidAuthorType @map("author_type")
  authorId       String        @map("author_id") @db.Uuid
  version        Int           @default(1)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  originalId     String?       @map("original_id") @db.Uuid
  organization   organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.Uuid
  creatorId      String        @map("creator_id") @db.Uuid
  creator        employee      @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  feedback       feedback[]

  @@unique(fields: [originalId, version])
}

model tender {
  id             String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String            @db.VarChar(100)
  description    String            @default("")
  serviceType    tenderServiceType @map("service_type")
  bids           bid[]
  status         tenderStatus      @default(Created)
  organizationId String            @map("organization_id") @db.Uuid
  organization   organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  version        Int               @default(1)
  creatorId      String            @map("creator_id") @db.Uuid
  creator        employee          @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  originalId     String?           @map("original_id") @db.Uuid

  @@unique(fields: [originalId, version])
}

model feedback {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creatorId String   @map("creator_id") @db.Uuid
  creator   employee @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bidId     String   @map("bid_id") @db.Uuid
  bid       bid      @relation(fields: [bidId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message   String
}

enum bidAuthorType {
  Organization
  User

  @@map("bud_author_type")
}

enum tenderServiceType {
  Construction
  Delivery
  Manufacture

  @@map("tender_service_type")
}

enum tenderStatus {
  Created
  Published
  Canceled

  @@map("tender_status")
}

enum bidStatus {
  Created
  Published
  Canceled

  @@map("bid_status")
}

enum organizationType {
  IE
  LLC
  JSC

  @@map("organization_type")
}
